// D. Детский праздник
// ограничение по времени на тест2 секунды
// ограничение по памяти на тест512 мегабайт
// вводстандартный ввод
// выводстандартный вывод
// Организаторы детского праздника планируют надуть для него m
//  воздушных шариков. С этой целью они пригласили n
//  добровольных помощников, i
// -й среди которых надувает шарик за ti
//  минут, однако каждый раз после надувания zi
//  шариков устает и отдыхает yi
//  минут. Теперь организаторы праздника хотят узнать, через какое время будут надуты все шарики при наиболее оптимальной работе помощников, и сколько шариков надует каждый из них. (Если помощник надул шарик, и должен отдохнуть, но больше шариков ему надувать не придется, то считается, что он закончил работу сразу после окончания надувания последнего шарика, а не после отдыха).

// Входные данные
// В первой строке входных данных задаются числа m
//  и n
//  (0≤m≤15000,1≤n≤1000)
// . Следующие n
//  строк содержат по три целых числа — ti
// , zi
//  и yi
//  соответственно (1≤ti,yi≤100,1≤zi≤1000)
// .

// Выходные данные
// Выведите в первой строке число T
//  — время, за которое будут надуты все шарики. Во второй строке выведите n
//  чисел — количество шариков, надутых каждым из приглашенных помощников. Если распределений шариков несколько, выведите любое из них.

// Пример
// входные данныеСкопировать
// 1 2
// 2 1 1
// 1 1 2
// выходные данныеСкопировать
// 1
// 0 1 

#include <bits/stdc++.h>

using namespace std;

int n, m;
vector<int> t, z, y;

int countBaloons(int i, int mid) {
    return ((mid / (t[i] * z[i] + y[i])) * z[i]) + min((mid % (t[i] * z[i] + y[i])) / t[i], z[i]);
}

int main() {
    cin >> m >> n;

    for (int i = 0; i < n; i++) {
        int tt, zz, yy;
        cin >> tt >> zz >> yy;
        t.push_back(tt);
        z.push_back(zz);
        y.push_back(yy);
    }

    int l = -1, r = 3000001;
    while (r - l > 1) {
        int mid = (l + r) / 2;
        int baloons_sum = 0;
        for (int i = 0; i < n; i++) {
            baloons_sum += countBaloons(i, mid);
        }

        if (baloons_sum >= m) {
            r = mid;
        } else {
            l = mid;
        }
    }

    cout << r << "\n";

    for (int i = 0; i < n; i++) {
        int bi = min(m, countBaloons(i, r));
        cout << bi << " ";
        m -= bi;
    }
}