// F. Игра со строкой
// ограничение по времени на тест2 секунды
// ограничение по памяти на тест512 мегабайт
// вводстандартный ввод
// выводстандартный вывод
// У Пети есть слово t
// , он хочет, чтобы из него получилось слово p
// . Петя начинает вычеркивать буквы в некотором порядке, который задан перестановкой номеров букв слова t
// : a1…a|t|
// . Заметим, что после вычеркивания буквы нумерация не меняется.

// Его брат Вася боится, что Петя может удалить слишком много букв, и слово p
//  не получится. Задача Васи состоит в том, чтобы в некоторый момент времени остановить брата и закончить вычеркивание самому, получив после этого слово p
// . Так как Пете нравится это занятие, Вася хочет остановить его как можно позже. Ваша задача — сообщить, сколько букв может вычеркнуть Петя до того, как его остановит Вася.

// Гарантируется, что слово p
//  можно получить вычеркиванием букв из t
// .

// Входные данные
// Первая и вторая строки входного файла содержат слова t
//  и p
// , соответственно. Слова состоят из строчных букв латинского алфавита (1≤|p|<|t|≤200000
// ).

// Следующая строка содержит перестановку a1…a|t|
//  номеров букв, задающую порядок, в котором Петя вычеркивает буквы слова t
//  (1≤ai≤|t|
// , все ai
//  различны).

// Выходные данные
// Выведите одно число — максимальное число букв, которые может вычеркнуть Петя.

// Пример
// входные данныеСкопировать
// ababcba
// abb
// 5 3 4 1 7 6 2
// выходные данныеСкопировать
// 3

#include <bits/stdc++.h>

using namespace std;

bool ok(string t, string p, int mid, vector<int> a) {
    vector<char> used(t.size());
    for (int i = 0; i < mid; i++) {
        used[a[i] - 1] = 1; 
    }

    int j = 0;
    for (int i = 0; i < t.size(); i++) {
        if (used[i] == 1) {
            continue;
        }

        if (t[i] == p[j]) {
            j++;
        }

        if (j == p.size()) {
            break;
        }
    }

    return j == p.size();
}

int main() {
    string t, p;
    cin >> t >> p;
    vector<int> a(t.size());
    for (int i = 0; i < t.size(); i++) cin >> a[i];

    int l = 0, r = t.size();
    while (r - l > 1) {
        int mid = (l + r) / 2;
        if (ok(t, p, mid, a)) {
            l = mid;
        } else {
            r = mid;
        }
    }

    cout << l << "\n";
}