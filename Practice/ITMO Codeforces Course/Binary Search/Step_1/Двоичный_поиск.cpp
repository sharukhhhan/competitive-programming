// A. Двоичный поиск
// ограничение по времени на тест2 секунды
// ограничение по памяти на тест512 мегабайт
// вводстандартный ввод
// выводстандартный вывод
// Реализуйте алгоритм двоичного поиска.

// Входные данные
// В первой строке входных данных содержатся натуральные числа n
//  и k
//  (1≤n
// , k≤105
// ) — длина массива и число запросов. Во второй строке содержатся n
//  элементов массива, отсортированного по неубыванию. В третьей строке содержатся k
//  запросов. Все элементы массива и запросы — целые числа, каждое из которых по модулю не превосходит 109
// .

// Выходные данные
// Требуется для каждого из k
//  запросов вывести в отдельную строку YES, если это число встречается в массиве, и NO в противном случае.

// Пример
// входные данныеСкопировать
// 10 10
// 1 61 126 217 2876 6127 39162 98126 712687 1000000000
// 100 6127 1 61 200 -10000 1 217 10000 1000000000
// выходные данныеСкопировать
// NO
// YES
// YES
// YES
// NO
// NO
// YES
// YES
// NO
// YES

#include <bits/stdc++.h>

using namespace std;

bool bin_search(vector<int>& a, int x) {
    int l = 0, r = a.size() - 1;
    while (r - l >= 0) {
        int mid = (l + r) / 2;

        if (a[mid] == x) {
            return true;
        } else if (a[mid] < x) {
            l = mid + 1;
        } else {
            r = mid - 1;
        }
    }
    return false;
}

int main() {
    int n, k;
    cin >> n >> k;
    vector<int> a(n), q(k);
    for (int i = 0; i < n; i++) cin >> a[i];
    for (int i = 0; i < k; i++) cin >> q[i];

    for (int x: q) {
        if (bin_search(a, x)) cout << "YES\n";
        else cout << "NO\n";
    }

}